<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       
       xsi:schemaLocation="
		http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
        http://www.springframework.org/schema/batch 
        http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-2.5.xsd
        http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-2.0.xsd"
	default-autowire="byType">
	
	<aop:aspectj-autoproxy />
	<context:component-scan base-package="springbatch" />
	
	<!-- jpa config
	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager" />	
	 -->
	 <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" />
	
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception" />
            <tx:method name="read*" read-only="true" />
            <tx:method name="is*" read-only="true" />
            <tx:method name="exists*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="validate*" read-only="true" />
            <tx:method name="count*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    
    <!--
         El origen de datos que apunta a la base de datos con las tablas de
         Spring Batch. En estas tablas Spring Batch lleva un registro de todas
         las corridas que se hicieron.
         El script para generar las tablas necesarias por Spring Batch se
         encuentra dentro de spring-batch-core-xxxx.jar (en la raiz).
     -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@172.16.216.77:1521/GAUDITST" />
		<property name="username" value="CLIEN" />
		<property name="password" value="cofidis" />
		<property name="initialSize" value="1" />
		<property name="maxActive" value="10" />
		<property name="maxIdle" value="5" />
	</bean>
	
    <!--  bean id="persistenceUnitManager" class="com.esilog.descans.util.jpa.PersistenceUnitMerger">
		<property name="persistenceXmlLocations">
			<list>				
			</list>			
		</property>	
		<property name="defaultDataSource" ref="dataSource"></property>			
	</bean>
	
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
 		</property>
	</bean-->

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" />
	
	<bean class="es.cofidis.sl.CofidisLog4jConfigurer" lazy-init="false">
		<!-- property name="logpath" value="${log4j.path}" /-->
		<property name="refreshInterval" value="0" />
	</bean>
			
	<bean class="com.esilog.descans.util.PropertyPlaceholdersUtils">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="false" />
		<property name="systemPropertiesMode" value="2" />
		<property name="locations">
			<list merge="false">
				<value>file:${fichero.prop}</value>
			</list>
		</property>
	</bean>
	
    <!--
        El gestor de transacciones que se usará durante el procesamiento batch.
        En este caso, usamos una implementación "dummy" provista por Spring Batch,
        ya que no usaremos ningun recurso transaccional.
    -->
    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

    <!--
        El repositorio de tareas de Spring Batch. Este bean es el encargado
        de guardar la información de las corridas en la base de datos.
        En este caso usaremos un repositorio en memoria, útil para desarrollo.
    -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>


    <!--
        Un ejecutador de tareas. A través de esta clase es que se inicia la
        ejecución de las taras batch.
    -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>


    <!--
        Un ejecutador de tareas. A través de esta clase es que se inicia la
        ejecución de las taras batch.
    -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>



    <!--
        Una trabajo de Spring Batch.
        Este es el bean principal de Spring Batch, que declara el trabajo batch
        que se va a ejecutar. El trabajo está compuesta de varios "pasos" (step).
        Los pasos se ejecutan en forma secuencial.

        En este ejemplo, el trabajo consiste en dos paso "guardarIndice" y "leerIndice".
        El primer step lee planetas, los mapea a un objeto y por medio de compass crea indices lucene.
        El segundo este lee planetas del indice y los imprime por consola.
    -->
    <batch:job id="trabajoBatch">
        <batch:step id="guardarIndice" next="leerIndice">
            <batch:tasklet>
                <batch:chunk reader="planetaItemReader" writer="planetaItemWriter" commit-interval="5" />
            </batch:tasklet>
        </batch:step>
        <batch:step id="leerIndice">
            <batch:tasklet>
                <batch:chunk reader="indiceItemReader" writer="consolaItemWriter" commit-interval="5" />
            </batch:tasklet>
        </batch:step>
    </batch:job>

    
    <!--
        Lector de planteas. Esta reader de base de datos es una clase
        utilitaria provista por Spring Batch. Este bean ejecuta el query "sql"
        y recorrer las filas resultantes. Cada fila es transformada con el
        "mapper" asociado.
        En este caso se usa un mapper utilitario, que de acuerdo al alias
        indicado en cada columna del query lo asocia a un objeto Planeta.
    -->
    <bean id="planetaItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />        
        <property name="sql" value="select CUT032_IDFINANCIA as codigo, CUT032_NOMTITULAR as nombre, CUT032_IMPORTE as diametro, CUT032_DIGITOCONTR as tipo, CUT032_DOMICILIO as significado from GESTI.CUT032FINANCIACIONES"/>
        <property name="rowMapper">
            <bean id="planetaMapper" class="org.springframework.jdbc.core.BeanPropertyRowMapper">
                <property name="mappedClass">
                      <value type="java.lang.Class">springbatch.demo5.Planeta</value>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="planetaItemWriter"  class="com.dosideas.springbatch.demo5.CompassItemWriter">
        <property name="compass" ref="compass"/>
    </bean>

    <!--
        Esta es la clase encargada de realizar la busqueda en el indice
     -->
    <bean id="indiceItemReader" class="springbatch.demo5.IndiceItemReader">
        <property name="compass" ref="compass"/>
    </bean>

    <!--
        Esta es la clase encargada de escribir los resultados de la lectura
        del "itemReader". Cada elemento leido por el "indiceItemReader" es
        procesado por este "itemWriter".
        ConsolaItemWriter recibe entonces un Planeta y lo muestra por consola.
    -->
    <bean id="consolaItemWriter" class="springbatch.demo5.ConsolaItemWriter"/>

    <bean id="compass"
          class="springbatch.demo5.CompassFactory" destroy-method="close">
    </bean>


</beans>